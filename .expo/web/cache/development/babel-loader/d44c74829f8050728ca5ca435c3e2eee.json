{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createHandler;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _areEqual = _interopRequireDefault(require(\"fbjs/lib/areEqual\"));\n\nvar _RNGestureHandlerModule = _interopRequireDefault(require(\"./RNGestureHandlerModule\"));\n\nvar _State = _interopRequireDefault(require(\"./State\"));\n\nvar _stateToPropMappings;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction findNodeHandle(node) {\n  if (_reactNative.Platform.OS === 'web') return node;\n  return (0, _reactNative.findNodeHandle)(node);\n}\n\nvar _NativeModules$UIMana = _reactNative.NativeModules.UIManager,\n    UIManager = _NativeModules$UIMana === void 0 ? {} : _NativeModules$UIMana;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nUIManager.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.genericDirectEventTypes), customGHEventsConfig);\n\nif (UIManager.getConstants) {\n  UIManager.getConstants().genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.getConstants().genericDirectEventTypes), customGHEventsConfig);\n}\n\nvar _UIManager$setJSRespo = UIManager.setJSResponder,\n    oldSetJSResponder = _UIManager$setJSRespo === void 0 ? function () {} : _UIManager$setJSRespo,\n    _UIManager$clearJSRes = UIManager.clearJSResponder,\n    oldClearJSResponder = _UIManager$clearJSRes === void 0 ? function () {} : _UIManager$clearJSRes;\n\nUIManager.setJSResponder = function (tag, blockNativeResponder) {\n  _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);\n\n  oldSetJSResponder(tag, blockNativeResponder);\n};\n\nUIManager.clearJSResponder = function () {\n  _RNGestureHandlerModule.default.handleClearJSResponder();\n\n  oldClearJSResponder();\n};\n\nvar handlerTag = 1;\nvar handlerIDToTag = {};\n\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\n\nfunction filterConfig(props, validProps) {\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var res = _objectSpread({}, defaults);\n\n  Object.keys(validProps).forEach(function (key) {\n    var value = props[key];\n\n    if (isConfigParam(value, key)) {\n      var _value = props[key];\n\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        _value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof _value !== 'object') {\n          _value = {\n            top: _value,\n            left: _value,\n            bottom: _value,\n            right: _value\n          };\n        }\n      }\n\n      res[key] = _value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (_reactNative.Platform.OS === 'web') {\n    return handlerIDs.map(function (_ref) {\n      var current = _ref.current;\n      return current;\n    }).filter(function (handle) {\n      return handle;\n    });\n  }\n\n  return handlerIDs.map(function (handlerID) {\n    return handlerIDToTag[handlerID] || handlerID.current && handlerID.current._handlerTag || -1;\n  }).filter(function (handlerTag) {\n    return handlerTag > 0;\n  });\n}\n\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nvar stateToPropMappings = (_stateToPropMappings = {}, (0, _defineProperty2.default)(_stateToPropMappings, _State.default.BEGAN, 'onBegan'), (0, _defineProperty2.default)(_stateToPropMappings, _State.default.FAILED, 'onFailed'), (0, _defineProperty2.default)(_stateToPropMappings, _State.default.CANCELLED, 'onCancelled'), (0, _defineProperty2.default)(_stateToPropMappings, _State.default.ACTIVE, 'onActivated'), (0, _defineProperty2.default)(_stateToPropMappings, _State.default.END, 'onEnded'), _stateToPropMappings);\n\nfunction createHandler(handlerName) {\n  var propTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var transformProps = arguments.length > 3 ? arguments[3] : undefined;\n  var customNativeProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  var Handler = function (_React$Component) {\n    (0, _inherits2.default)(Handler, _React$Component);\n\n    var _super = _createSuper(Handler);\n\n    function Handler(props) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, Handler);\n      _this = _super.call(this, props);\n\n      _this._onGestureHandlerEvent = function (event) {\n        if (event.nativeEvent.handlerTag === _this._handlerTag) {\n          _this.props.onGestureEvent && _this.props.onGestureEvent(event);\n        } else {\n          _this.props.onGestureHandlerEvent && _this.props.onGestureHandlerEvent(event);\n        }\n      };\n\n      _this._onGestureHandlerStateChange = function (event) {\n        if (event.nativeEvent.handlerTag === _this._handlerTag) {\n          _this.props.onHandlerStateChange && _this.props.onHandlerStateChange(event);\n          var stateEventName = stateToPropMappings[event.nativeEvent.state];\n\n          if (typeof _this.props[stateEventName] === 'function') {\n            _this.props[stateEventName](event);\n          }\n        } else {\n          _this.props.onGestureHandlerStateChange && _this.props.onGestureHandlerStateChange(event);\n        }\n      };\n\n      _this._refHandler = function (node) {\n        _this._viewNode = node;\n\n        var child = _react.default.Children.only(_this.props.children);\n\n        var ref = child.ref;\n\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      };\n\n      _this._createGestureHandler = function (newConfig) {\n        _this._config = newConfig;\n\n        _RNGestureHandlerModule.default.createGestureHandler(handlerName, _this._handlerTag, newConfig);\n      };\n\n      _this._attachGestureHandler = function (newViewTag) {\n        _this._viewTag = newViewTag;\n\n        _RNGestureHandlerModule.default.attachGestureHandler(_this._handlerTag, newViewTag);\n      };\n\n      _this._updateGestureHandler = function (newConfig) {\n        _this._config = newConfig;\n\n        _RNGestureHandlerModule.default.updateGestureHandler(_this._handlerTag, newConfig);\n      };\n\n      _this._handlerTag = handlerTag++;\n      _this._config = {};\n\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\" + props.id + \"\\\" already registered\");\n        }\n\n        handlerIDToTag[props.id] = _this._handlerTag;\n      }\n\n      return _this;\n    }\n\n    (0, _createClass2.default)(Handler, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        _RNGestureHandlerModule.default.dropGestureHandler(this._handlerTag);\n\n        if (this._updateEnqueued) {\n          clearImmediate(this._updateEnqueued);\n        }\n\n        if (this.props.id) {\n          delete handlerIDToTag[this.props.id];\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        if (hasUnresolvedRefs(this.props)) {\n          this._updateEnqueued = setImmediate(function () {\n            _this2._updateEnqueued = null;\n\n            _this2._update();\n          });\n        }\n\n        this._createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, _objectSpread(_objectSpread({}, this.constructor.propTypes), customNativeProps), config));\n\n        this._attachGestureHandler(findNodeHandle(this._viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this._viewNode);\n\n        if (this._viewTag !== viewTag) {\n          this._attachGestureHandler(viewTag);\n        }\n\n        this._update();\n      }\n    }, {\n      key: \"_update\",\n      value: function _update() {\n        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, _objectSpread(_objectSpread({}, this.constructor.propTypes), customNativeProps), config);\n\n        if (!(0, _areEqual.default)(this._config, newConfig)) {\n          this._updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, _objectSpread(_objectSpread({}, this.constructor.propTypes), customNativeProps), config);\n\n        this._updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this._onGestureHandlerEvent;\n        var _this$props = this.props,\n            onGestureEvent = _this$props.onGestureEvent,\n            onGestureHandlerEvent = _this$props.onGestureHandlerEvent;\n\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureEventHandler = this.props.onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var gestureStateEventHandler = this._onGestureHandlerStateChange;\n        var _this$props2 = this.props,\n            onHandlerStateChange = _this$props2.onHandlerStateChange,\n            onGestureHandlerStateChange = _this$props2.onGestureHandlerStateChange;\n\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureStateEventHandler = this.props.onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var child = _react.default.Children.only(this.props.children);\n\n        var grandChildren = child.props.children;\n\n        if (_reactNative.Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = _react.default.Children.toArray(grandChildren);\n          grandChildren.push(_reactNative.Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n\n        return _react.default.cloneElement(child, {\n          ref: this._refHandler,\n          collapsable: false,\n          onGestureHandlerEvent: gestureEventHandler,\n          onGestureHandlerStateChange: gestureStateEventHandler\n        }, grandChildren);\n      }\n    }]);\n    return Handler;\n  }(_react.default.Component);\n\n  Handler.displayName = handlerName;\n  Handler.propTypes = propTypes;\n  return Handler;\n}","map":{"version":3,"sources":["E:/UTCH/Cuatrimestre 4/Diseño de Apps/reactNative/actividad-10/node_modules/react-native-gesture-handler/createHandler.js"],"names":["findNodeHandle","node","Platform","OS","NativeModules","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","handlerTag","handlerIDToTag","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","res","keys","forEach","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","Array","isArray","map","current","filter","handle","handlerID","_handlerTag","hasUnresolvedRefs","extract","refs","some","r","stateToPropMappings","State","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","handlerName","propTypes","config","transformProps","customNativeProps","Handler","_onGestureHandlerEvent","event","nativeEvent","onGestureEvent","_onGestureHandlerStateChange","onHandlerStateChange","stateEventName","state","_refHandler","_viewNode","child","React","Children","only","children","ref","_createGestureHandler","newConfig","_config","createGestureHandler","_attachGestureHandler","newViewTag","_viewTag","attachGestureHandler","_updateGestureHandler","updateGestureHandler","id","Error","dropGestureHandler","_updateEnqueued","clearImmediate","setImmediate","_update","constructor","viewTag","updates","mergedProps","gestureEventHandler","gestureStateEventHandler","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","collapsable","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  findNodeHandle as findNodeHandleRN,\r\n  NativeModules,\r\n  Touchable,\r\n  Platform,\r\n} from 'react-native';\r\nimport deepEqual from 'fbjs/lib/areEqual';\r\nimport RNGestureHandlerModule from './RNGestureHandlerModule';\r\nimport State from './State';\r\n\r\nfunction findNodeHandle(node) {\r\n  if (Platform.OS === 'web') return node;\r\n  return findNodeHandleRN(node);\r\n}\r\n\r\nconst { UIManager = {} } = NativeModules;\r\n\r\nconst customGHEventsConfig = {\r\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\r\n  onGestureHandlerStateChange: {\r\n    registrationName: 'onGestureHandlerStateChange',\r\n  },\r\n};\r\n\r\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\r\n// native module.\r\n// Once new event types are registered with react it is possible to dispatch these\r\n// events to all kind of native views.\r\nUIManager.genericDirectEventTypes = {\r\n  ...UIManager.genericDirectEventTypes,\r\n  ...customGHEventsConfig,\r\n};\r\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\r\n// returned by UIManager.getConstants(), we need to add it there as well to make\r\n// it compatible with RN 61+\r\nif (UIManager.getConstants) {\r\n  UIManager.getConstants().genericDirectEventTypes = {\r\n    ...UIManager.getConstants().genericDirectEventTypes,\r\n    ...customGHEventsConfig,\r\n  };\r\n}\r\n\r\n// Wrap JS responder calls and notify gesture handler manager\r\nconst {\r\n  setJSResponder: oldSetJSResponder = () => {},\r\n  clearJSResponder: oldClearJSResponder = () => {},\r\n} = UIManager;\r\nUIManager.setJSResponder = (tag, blockNativeResponder) => {\r\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\r\n  oldSetJSResponder(tag, blockNativeResponder);\r\n};\r\nUIManager.clearJSResponder = () => {\r\n  RNGestureHandlerModule.handleClearJSResponder();\r\n  oldClearJSResponder();\r\n};\r\n\r\nlet handlerTag = 1;\r\nconst handlerIDToTag = {};\r\n\r\nfunction isConfigParam(param, name) {\r\n  // param !== Object(param) returns false if `param` is a function\r\n  // or an object and returns true if `param` is null\r\n  return (\r\n    param !== undefined &&\r\n    (param !== Object(param) || !('__isNative' in param)) &&\r\n    name !== 'onHandlerStateChange' &&\r\n    name !== 'onGestureEvent'\r\n  );\r\n}\r\n\r\nfunction filterConfig(props, validProps, defaults = {}) {\r\n  const res = { ...defaults };\r\n  Object.keys(validProps).forEach(key => {\r\n    const value = props[key];\r\n    if (isConfigParam(value, key)) {\r\n      let value = props[key];\r\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\r\n        value = transformIntoHandlerTags(props[key]);\r\n      } else if (key === 'hitSlop') {\r\n        if (typeof value !== 'object') {\r\n          value = { top: value, left: value, bottom: value, right: value };\r\n        }\r\n      }\r\n      res[key] = value;\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\nfunction transformIntoHandlerTags(handlerIDs) {\r\n  if (!Array.isArray(handlerIDs)) {\r\n    handlerIDs = [handlerIDs];\r\n  }\r\n\r\n  if (Platform.OS === 'web') {\r\n    return handlerIDs.map(({ current }) => current).filter(handle => handle);\r\n  }\r\n  // converts handler string IDs into their numeric tags\r\n  return handlerIDs\r\n    .map(\r\n      handlerID =>\r\n        handlerIDToTag[handlerID] ||\r\n        (handlerID.current && handlerID.current._handlerTag) ||\r\n        -1\r\n    )\r\n    .filter(handlerTag => handlerTag > 0);\r\n}\r\n\r\nfunction hasUnresolvedRefs(props) {\r\n  const extract = refs => {\r\n    if (!Array.isArray(refs)) {\r\n      return refs && refs.current === null;\r\n    }\r\n    return refs.some(r => r && r.current === null);\r\n  };\r\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\r\n}\r\n\r\nconst stateToPropMappings = {\r\n  [State.BEGAN]: 'onBegan',\r\n  [State.FAILED]: 'onFailed',\r\n  [State.CANCELLED]: 'onCancelled',\r\n  [State.ACTIVE]: 'onActivated',\r\n  [State.END]: 'onEnded',\r\n};\r\n\r\nexport default function createHandler(\r\n  handlerName,\r\n  propTypes = {},\r\n  config = {},\r\n  transformProps,\r\n  customNativeProps = {}\r\n) {\r\n  class Handler extends React.Component {\r\n    static displayName = handlerName;\r\n\r\n    static propTypes = propTypes;\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this._handlerTag = handlerTag++;\r\n      this._config = {};\r\n      if (props.id) {\r\n        if (handlerIDToTag[props.id] !== undefined) {\r\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\r\n        }\r\n        handlerIDToTag[props.id] = this._handlerTag;\r\n      }\r\n    }\r\n\r\n    _onGestureHandlerEvent = event => {\r\n      if (event.nativeEvent.handlerTag === this._handlerTag) {\r\n        this.props.onGestureEvent && this.props.onGestureEvent(event);\r\n      } else {\r\n        this.props.onGestureHandlerEvent &&\r\n          this.props.onGestureHandlerEvent(event);\r\n      }\r\n    };\r\n\r\n    _onGestureHandlerStateChange = event => {\r\n      if (event.nativeEvent.handlerTag === this._handlerTag) {\r\n        this.props.onHandlerStateChange &&\r\n          this.props.onHandlerStateChange(event);\r\n\r\n        const stateEventName = stateToPropMappings[event.nativeEvent.state];\r\n        if (typeof this.props[stateEventName] === 'function') {\r\n          this.props[stateEventName](event);\r\n        }\r\n      } else {\r\n        this.props.onGestureHandlerStateChange &&\r\n          this.props.onGestureHandlerStateChange(event);\r\n      }\r\n    };\r\n\r\n    _refHandler = node => {\r\n      this._viewNode = node;\r\n\r\n      const child = React.Children.only(this.props.children);\r\n      const { ref } = child;\r\n      if (ref !== null) {\r\n        if (typeof ref === 'function') {\r\n          ref(node);\r\n        } else {\r\n          ref.current = node;\r\n        }\r\n      }\r\n    };\r\n\r\n    _createGestureHandler = newConfig => {\r\n      this._config = newConfig;\r\n\r\n      RNGestureHandlerModule.createGestureHandler(\r\n        handlerName,\r\n        this._handlerTag,\r\n        newConfig\r\n      );\r\n    };\r\n\r\n    _attachGestureHandler = newViewTag => {\r\n      this._viewTag = newViewTag;\r\n\r\n      RNGestureHandlerModule.attachGestureHandler(this._handlerTag, newViewTag);\r\n    };\r\n\r\n    _updateGestureHandler = newConfig => {\r\n      this._config = newConfig;\r\n\r\n      RNGestureHandlerModule.updateGestureHandler(this._handlerTag, newConfig);\r\n    };\r\n\r\n    componentWillUnmount() {\r\n      RNGestureHandlerModule.dropGestureHandler(this._handlerTag);\r\n      if (this._updateEnqueued) {\r\n        clearImmediate(this._updateEnqueued);\r\n      }\r\n      if (this.props.id) {\r\n        delete handlerIDToTag[this.props.id];\r\n      }\r\n    }\r\n\r\n    componentDidMount() {\r\n      if (hasUnresolvedRefs(this.props)) {\r\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\r\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\r\n        // _update method that will try to update native handler props using\r\n        // setImmediate. This makes it so _update function gets called after all\r\n        // react components are mounted and we expect the missing ref object to\r\n        // be resolved by then.\r\n        this._updateEnqueued = setImmediate(() => {\r\n          this._updateEnqueued = null;\r\n          this._update();\r\n        });\r\n      }\r\n\r\n      this._createGestureHandler(\r\n        filterConfig(\r\n          transformProps ? transformProps(this.props) : this.props,\r\n          { ...this.constructor.propTypes, ...customNativeProps },\r\n          config\r\n        )\r\n      );\r\n      this._attachGestureHandler(findNodeHandle(this._viewNode));\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      const viewTag = findNodeHandle(this._viewNode);\r\n      if (this._viewTag !== viewTag) {\r\n        this._attachGestureHandler(viewTag);\r\n      }\r\n      this._update();\r\n    }\r\n\r\n    _update() {\r\n      const newConfig = filterConfig(\r\n        transformProps ? transformProps(this.props) : this.props,\r\n        { ...this.constructor.propTypes, ...customNativeProps },\r\n        config\r\n      );\r\n      if (!deepEqual(this._config, newConfig)) {\r\n        this._updateGestureHandler(newConfig);\r\n      }\r\n    }\r\n\r\n    setNativeProps(updates) {\r\n      const mergedProps = { ...this.props, ...updates };\r\n      const newConfig = filterConfig(\r\n        transformProps ? transformProps(mergedProps) : mergedProps,\r\n        { ...this.constructor.propTypes, ...customNativeProps },\r\n        config\r\n      );\r\n      this._updateGestureHandler(newConfig);\r\n    }\r\n\r\n    render() {\r\n      let gestureEventHandler = this._onGestureHandlerEvent;\r\n      const { onGestureEvent, onGestureHandlerEvent } = this.props;\r\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\r\n        // If it's not a method it should be an native Animated.event\r\n        // object. We set it directly as the handler for the view\r\n        // In this case nested handlers are not going to be supported\r\n        if (onGestureHandlerEvent) {\r\n          throw new Error(\r\n            'Nesting touch handlers with native animated driver is not supported yet'\r\n          );\r\n        }\r\n        gestureEventHandler = this.props.onGestureEvent;\r\n      } else {\r\n        if (\r\n          onGestureHandlerEvent &&\r\n          typeof onGestureHandlerEvent !== 'function'\r\n        ) {\r\n          throw new Error(\r\n            'Nesting touch handlers with native animated driver is not supported yet'\r\n          );\r\n        }\r\n      }\r\n\r\n      let gestureStateEventHandler = this._onGestureHandlerStateChange;\r\n      const { onHandlerStateChange, onGestureHandlerStateChange } = this.props;\r\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\r\n        // If it's not a method it should be an native Animated.event\r\n        // object. We set it directly as the handler for the view\r\n        // In this case nested handlers are not going to be supported\r\n        if (onGestureHandlerStateChange) {\r\n          throw new Error(\r\n            'Nesting touch handlers with native animated driver is not supported yet'\r\n          );\r\n        }\r\n        gestureStateEventHandler = this.props.onHandlerStateChange;\r\n      } else {\r\n        if (\r\n          onGestureHandlerStateChange &&\r\n          typeof onGestureHandlerStateChange !== 'function'\r\n        ) {\r\n          throw new Error(\r\n            'Nesting touch handlers with native animated driver is not supported yet'\r\n          );\r\n        }\r\n      }\r\n\r\n      const child = React.Children.only(this.props.children);\r\n      let grandChildren = child.props.children;\r\n      if (\r\n        Touchable.TOUCH_TARGET_DEBUG &&\r\n        child.type &&\r\n        (child.type === 'RNGestureHandlerButton' ||\r\n          child.type.name === 'View' ||\r\n          child.type.displayName === 'View')\r\n      ) {\r\n        grandChildren = React.Children.toArray(grandChildren);\r\n        grandChildren.push(\r\n          Touchable.renderDebugView({\r\n            color: 'mediumspringgreen',\r\n            hitSlop: child.props.hitSlop,\r\n          })\r\n        );\r\n      }\r\n      return React.cloneElement(\r\n        child,\r\n        {\r\n          ref: this._refHandler,\r\n          collapsable: false,\r\n          onGestureHandlerEvent: gestureEventHandler,\r\n          onGestureHandlerStateChange: gestureStateEventHandler,\r\n        },\r\n        grandChildren\r\n      );\r\n    }\r\n  }\r\n  return Handler;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}