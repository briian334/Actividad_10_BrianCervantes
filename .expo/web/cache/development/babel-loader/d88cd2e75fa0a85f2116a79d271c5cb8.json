{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\n\nvar _constants = require(\"./constants\");\n\nvar _Errors = require(\"./Errors\");\n\nvar _DraggingGestureHandler = _interopRequireDefault(require(\"./DraggingGestureHandler\"));\n\nvar _utils = require(\"./utils\");\n\nvar _excluded = [\"maxPointers\", \"deltaX\", \"deltaY\"],\n    _excluded2 = [\"numberOfPointers\", \"direction\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar FlingGestureHandler = function (_DraggingGestureHandl) {\n  (0, _inherits2.default)(FlingGestureHandler, _DraggingGestureHandl);\n\n  var _super = _createSuper(FlingGestureHandler);\n\n  function FlingGestureHandler() {\n    (0, _classCallCheck2.default)(this, FlingGestureHandler);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(FlingGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'swipe';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return _hammerjs.default.Swipe;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(event) {\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: _hammerjs.default.INPUT_MOVE,\n        isFinal: false,\n        isFirst: true\n      }));\n      this.isGestureRunning = false;\n      this.hasGestureFailed = false;\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: _hammerjs.default.INPUT_END,\n        isFinal: true\n      }));\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n\n      (0, _get2.default)((0, _getPrototypeOf2.default)(FlingGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        setTimeout(function () {\n          if (_this.isGestureRunning) {\n            _this.cancelEvent(ev);\n          }\n        });\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return {\n        pointers: this.config.numberOfPointers,\n        direction: this.getDirection()\n      };\n    }\n  }, {\n    key: \"getTargetDirections\",\n    value: function getTargetDirections(direction) {\n      var directions = [];\n\n      if (direction & _constants.Direction.RIGHT) {\n        directions.push(_hammerjs.default.DIRECTION_RIGHT);\n      }\n\n      if (direction & _constants.Direction.LEFT) {\n        directions.push(_hammerjs.default.DIRECTION_LEFT);\n      }\n\n      if (direction & _constants.Direction.UP) {\n        directions.push(_hammerjs.default.DIRECTION_UP);\n      }\n\n      if (direction & _constants.Direction.DOWN) {\n        directions.push(_hammerjs.default.DIRECTION_DOWN);\n      }\n\n      return directions;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var _this$getConfig = this.getConfig(),\n          direction = _this$getConfig.direction;\n\n      var directions = [];\n\n      if (direction & _constants.Direction.RIGHT) {\n        directions.push(_hammerjs.default.DIRECTION_HORIZONTAL);\n      }\n\n      if (direction & _constants.Direction.LEFT) {\n        directions.push(_hammerjs.default.DIRECTION_HORIZONTAL);\n      }\n\n      if (direction & _constants.Direction.UP) {\n        directions.push(_hammerjs.default.DIRECTION_VERTICAL);\n      }\n\n      if (direction & _constants.Direction.DOWN) {\n        directions.push(_hammerjs.default.DIRECTION_VERTICAL);\n      }\n\n      directions = (0, _toConsumableArray2.default)(new Set(directions));\n      if (directions.length === 0) return _hammerjs.default.DIRECTION_NONE;\n      if (directions.length === 1) return directions[0];\n      return _hammerjs.default.DIRECTION_ALL;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref, recognizer, _ref2) {\n      var minPointers = _ref.minPointers,\n          maxPointers = _ref.maxPointers,\n          numberOfPointers = _ref.numberOfPointers,\n          maxDist = _ref.maxDist,\n          maxDeltaX = _ref.maxDeltaX,\n          maxDeltaY = _ref.maxDeltaY,\n          maxDistSq = _ref.maxDistSq,\n          shouldCancelWhenOutside = _ref.shouldCancelWhenOutside;\n      var pointerLength = _ref2.maxPointers,\n          dx = _ref2.deltaX,\n          dy = _ref2.deltaY,\n          props = (0, _objectWithoutProperties2.default)(_ref2, _excluded);\n      var validPointerCount = pointerLength === numberOfPointers;\n\n      if (!validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: validPointerCount\n      };\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref3) {\n      var _ref3$numberOfPointer = _ref3.numberOfPointers,\n          numberOfPointers = _ref3$numberOfPointer === void 0 ? 1 : _ref3$numberOfPointer,\n          direction = _ref3.direction,\n          props = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);\n\n      if ((0, _utils.isnan)(direction) || typeof direction !== 'number') {\n        throw new _Errors.GesturePropError('direction', direction, 'number');\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(FlingGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        numberOfPointers: numberOfPointers,\n        direction: direction\n      }, props));\n    }\n  }]);\n  return FlingGestureHandler;\n}(_DraggingGestureHandler.default);\n\nvar _default = FlingGestureHandler;\nexports.default = _default;","map":{"version":3,"sources":["E:/UTCH/Cuatrimestre 4/DiseÃ±o de Apps/reactNative/actividad-10/node_modules/react-native-gesture-handler/web/FlingGestureHandler.js"],"names":["FlingGestureHandler","Hammer","Swipe","event","sendEvent","eventType","INPUT_MOVE","isFinal","isFirst","isGestureRunning","hasGestureFailed","INPUT_END","ev","setTimeout","cancelEvent","gesture","hammer","get","name","options","enable","onStart","pointers","config","numberOfPointers","direction","getDirection","directions","Direction","RIGHT","push","DIRECTION_RIGHT","LEFT","DIRECTION_LEFT","UP","DIRECTION_UP","DOWN","DIRECTION_DOWN","getConfig","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","Set","length","DIRECTION_NONE","DIRECTION_ALL","recognizer","minPointers","maxPointers","maxDist","maxDeltaX","maxDeltaY","maxDistSq","shouldCancelWhenOutside","pointerLength","dx","deltaX","dy","deltaY","props","validPointerCount","failed","success","GesturePropError","DraggingGestureHandler"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\r\n\r\nimport { Direction } from './constants';\r\nimport { GesturePropError } from './Errors';\r\nimport DraggingGestureHandler from './DraggingGestureHandler';\r\nimport { isnan } from './utils';\r\n\r\nclass FlingGestureHandler extends DraggingGestureHandler {\r\n  get name() {\r\n    return 'swipe';\r\n  }\r\n\r\n  get NativeGestureClass() {\r\n    return Hammer.Swipe;\r\n  }\r\n\r\n  onGestureActivated(event) {\r\n    this.sendEvent({\r\n      ...event,\r\n      eventType: Hammer.INPUT_MOVE,\r\n      isFinal: false,\r\n      isFirst: true,\r\n    });\r\n    this.isGestureRunning = false;\r\n    this.hasGestureFailed = false;\r\n    this.sendEvent({\r\n      ...event,\r\n      eventType: Hammer.INPUT_END,\r\n      isFinal: true,\r\n    });\r\n  }\r\n\r\n  onRawEvent(ev) {\r\n    super.onRawEvent(ev);\r\n    if (this.hasGestureFailed) {\r\n      return;\r\n    }\r\n    // Hammer doesn't send a `cancel` event for taps.\r\n    // Manually fail the event.\r\n    if (ev.isFinal) {\r\n      setTimeout(() => {\r\n        if (this.isGestureRunning) {\r\n          this.cancelEvent(ev);\r\n        }\r\n      });\r\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\r\n      // Tap Gesture start event\r\n      const gesture = this.hammer.get(this.name);\r\n      if (gesture.options.enable(gesture, ev)) {\r\n        this.onStart(ev);\r\n        this.sendEvent(ev);\r\n      }\r\n    }\r\n  }\r\n\r\n  getHammerConfig() {\r\n    return {\r\n      pointers: this.config.numberOfPointers,\r\n      direction: this.getDirection(),\r\n    };\r\n  }\r\n\r\n  getTargetDirections(direction) {\r\n    const directions = [];\r\n    if (direction & Direction.RIGHT) {\r\n      directions.push(Hammer.DIRECTION_RIGHT);\r\n    }\r\n    if (direction & Direction.LEFT) {\r\n      directions.push(Hammer.DIRECTION_LEFT);\r\n    }\r\n    if (direction & Direction.UP) {\r\n      directions.push(Hammer.DIRECTION_UP);\r\n    }\r\n    if (direction & Direction.DOWN) {\r\n      directions.push(Hammer.DIRECTION_DOWN);\r\n    }\r\n    // const hammerDirection = directions.reduce((a, b) => a | b, 0);\r\n    return directions;\r\n  }\r\n\r\n  getDirection() {\r\n    const { direction } = this.getConfig();\r\n\r\n    let directions = [];\r\n    if (direction & Direction.RIGHT) {\r\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\r\n    }\r\n    if (direction & Direction.LEFT) {\r\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\r\n    }\r\n    if (direction & Direction.UP) {\r\n      directions.push(Hammer.DIRECTION_VERTICAL);\r\n    }\r\n    if (direction & Direction.DOWN) {\r\n      directions.push(Hammer.DIRECTION_VERTICAL);\r\n    }\r\n    directions = [...new Set(directions)];\r\n\r\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\r\n    if (directions.length === 1) return directions[0];\r\n    return Hammer.DIRECTION_ALL;\r\n  }\r\n\r\n  isGestureEnabledForEvent(\r\n    {\r\n      minPointers,\r\n      maxPointers,\r\n      numberOfPointers,\r\n      maxDist,\r\n      maxDeltaX,\r\n      maxDeltaY,\r\n      maxDistSq,\r\n      shouldCancelWhenOutside,\r\n    },\r\n    recognizer,\r\n    { maxPointers: pointerLength, deltaX: dx, deltaY: dy, ...props }\r\n  ) {\r\n    const validPointerCount = pointerLength === numberOfPointers;\r\n    if (!validPointerCount && this.isGestureRunning) {\r\n      return { failed: true };\r\n    }\r\n    return { success: validPointerCount };\r\n  }\r\n\r\n  updateGestureConfig({ numberOfPointers = 1, direction, ...props }) {\r\n    if (isnan(direction) || typeof direction !== 'number') {\r\n      throw new GesturePropError('direction', direction, 'number');\r\n    }\r\n    return super.updateGestureConfig({\r\n      numberOfPointers,\r\n      direction,\r\n      ...props,\r\n    });\r\n  }\r\n}\r\n\r\nexport default FlingGestureHandler;\r\n"]},"metadata":{},"sourceType":"script"}