{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeIphoneXHelper = require(\"react-native-iphone-x-helper\");\n\nvar _jsxFileName = \"E:\\\\UTCH\\\\Cuatrimestre 4\\\\Dise\\xF1o de Apps\\\\reactNative\\\\actividad-10\\\\node_modules\\\\react-native-keyboard-aware-scroll-view\\\\lib\\\\KeyboardAwareHOC.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar _KAM_DEFAULT_TAB_BAR_HEIGHT = (0, _reactNativeIphoneXHelper.isIphoneX)() ? 83 : 49;\n\nvar _KAM_KEYBOARD_OPENING_TIME = 250;\nvar _KAM_EXTRA_HEIGHT = 75;\nvar supportedKeyboardEvents = ['keyboardWillShow', 'keyboardDidShow', 'keyboardWillHide', 'keyboardDidHide', 'keyboardWillChangeFrame', 'keyboardDidChangeFrame'];\n\nvar keyboardEventToCallbackName = function keyboardEventToCallbackName(eventName) {\n  return 'on' + eventName[0].toUpperCase() + eventName.substring(1);\n};\n\nvar keyboardEventPropTypes = supportedKeyboardEvents.reduce(function (acc, eventName) {\n  return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2.default)({}, keyboardEventToCallbackName(eventName), _propTypes.default.func));\n}, {});\nvar keyboardAwareHOCTypeEvents = supportedKeyboardEvents.reduce(function (acc, eventName) {\n  return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2.default)({}, keyboardEventToCallbackName(eventName), Function));\n}, {});\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent && (WrappedComponent.displayName || WrappedComponent.name) || 'Component';\n}\n\nvar ScrollIntoViewDefaultOptions = {\n  enableOnAndroid: false,\n  contentContainerStyle: undefined,\n  enableAutomaticScroll: true,\n  extraHeight: _KAM_EXTRA_HEIGHT,\n  extraScrollHeight: 0,\n  enableResetScrollToCoords: true,\n  keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\n  viewIsInsideTabBar: false,\n  refPropName: 'ref',\n  extractNativeRef: function extractNativeRef(ref) {\n    var shouldCallGetNode = !_reactNative.Platform.constants || _reactNative.Platform.constants.reactNativeVersion.major === 0 && _reactNative.Platform.constants.reactNativeVersion.minor < 62;\n\n    if (ref.getNode && shouldCallGetNode) {\n      return ref.getNode();\n    } else {\n      return ref;\n    }\n  }\n};\n\nfunction KeyboardAwareHOC(ScrollableComponent) {\n  var _class, _temp;\n\n  var userOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var hocOptions = _objectSpread(_objectSpread({}, ScrollIntoViewDefaultOptions), userOptions);\n\n  return _temp = _class = function (_React$Component) {\n    (0, _inherits2.default)(_class, _React$Component);\n\n    var _super = _createSuper(_class);\n\n    function _class(props) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, _class);\n      _this = _super.call(this, props);\n\n      _this.getScrollResponder = function () {\n        return _this._rnkasv_keyboardView && _this._rnkasv_keyboardView.getScrollResponder && _this._rnkasv_keyboardView.getScrollResponder();\n      };\n\n      _this.scrollToPosition = function (x, y) {\n        var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n        var responder = _this.getScrollResponder();\n\n        if (!responder) {\n          return;\n        }\n\n        if (responder.scrollResponderScrollTo) {\n          responder.scrollResponderScrollTo({\n            x: x,\n            y: y,\n            animated: animated\n          });\n        } else if (responder.scrollTo) {\n          responder.scrollTo({\n            x: x,\n            y: y,\n            animated: animated\n          });\n        }\n      };\n\n      _this.scrollToEnd = function () {\n        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        var responder = _this.getScrollResponder();\n\n        if (!responder) {\n          return;\n        }\n\n        if (responder.scrollResponderScrollToEnd) {\n          responder.scrollResponderScrollToEnd({\n            animated: animated\n          });\n        } else if (responder.scrollToEnd) {\n          responder.scrollToEnd({\n            animated: animated\n          });\n        }\n      };\n\n      _this.scrollForExtraHeightOnAndroid = function (extraHeight) {\n        _this.scrollToPosition(0, _this.position.y + extraHeight, true);\n      };\n\n      _this.scrollToFocusedInput = function (reactNode, extraHeight, keyboardOpeningTime) {\n        if (extraHeight === undefined) {\n          extraHeight = _this.props.extraHeight || 0;\n        }\n\n        if (keyboardOpeningTime === undefined) {\n          keyboardOpeningTime = _this.props.keyboardOpeningTime || 0;\n        }\n\n        setTimeout(function () {\n          if (!_this.mountedComponent) {\n            return;\n          }\n\n          var responder = _this.getScrollResponder();\n\n          responder && responder.scrollResponderScrollNativeHandleToKeyboard(reactNode, extraHeight, true);\n        }, keyboardOpeningTime);\n      };\n\n      _this.scrollIntoView = function _callee(element) {\n        var options,\n            _await$Promise$all,\n            _await$Promise$all2,\n            parentLayout,\n            childLayout,\n            getScrollPosition,\n            _getScrollPosition,\n            x,\n            y,\n            animated,\n            _args = arguments;\n\n        return _regenerator.default.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n                if (!(!_this._rnkasv_keyboardView || !element)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.next = 5;\n                return _regenerator.default.awrap(Promise.all([_this._measureElement(_this._rnkasv_keyboardView), _this._measureElement(element)]));\n\n              case 5:\n                _await$Promise$all = _context.sent;\n                _await$Promise$all2 = (0, _slicedToArray2.default)(_await$Promise$all, 2);\n                parentLayout = _await$Promise$all2[0];\n                childLayout = _await$Promise$all2[1];\n                getScrollPosition = options.getScrollPosition || _this._defaultGetScrollPosition;\n                _getScrollPosition = getScrollPosition(parentLayout, childLayout, _this.position), x = _getScrollPosition.x, y = _getScrollPosition.y, animated = _getScrollPosition.animated;\n\n                _this.scrollToPosition(x, y, animated);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      _this._defaultGetScrollPosition = function (parentLayout, childLayout, contentOffset) {\n        return {\n          x: 0,\n          y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y),\n          animated: true\n        };\n      };\n\n      _this._measureElement = function (element) {\n        var node = (0, _reactNative.findNodeHandle)(element);\n        return new Promise(function (resolve) {\n          _reactNative.UIManager.measureInWindow(node, function (x, y, width, height) {\n            resolve({\n              x: x,\n              y: y,\n              width: width,\n              height: height\n            });\n          });\n        });\n      };\n\n      _this._updateKeyboardSpace = function (frames) {\n        if (_this.props.enableAutomaticScroll) {\n          var keyboardSpace = frames.endCoordinates.height + _this.props.extraScrollHeight;\n\n          if (_this.props.viewIsInsideTabBar) {\n            keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT;\n          }\n\n          _this.setState({\n            keyboardSpace: keyboardSpace\n          });\n\n          var currentlyFocusedField = _reactNative.TextInput.State.currentlyFocusedInput ? (0, _reactNative.findNodeHandle)(_reactNative.TextInput.State.currentlyFocusedInput()) : _reactNative.TextInput.State.currentlyFocusedField();\n\n          var responder = _this.getScrollResponder();\n\n          if (!currentlyFocusedField || !responder) {\n            return;\n          }\n\n          _reactNative.UIManager.viewIsDescendantOf(currentlyFocusedField, responder.getInnerViewNode(), function (isAncestor) {\n            if (isAncestor) {\n              _reactNative.UIManager.measureInWindow(currentlyFocusedField, function (x, y, width, height) {\n                var textInputBottomPosition = y + height;\n                var keyboardPosition = frames.endCoordinates.screenY;\n                var totalExtraHeight = _this.props.extraScrollHeight + _this.props.extraHeight;\n\n                if (_reactNative.Platform.OS === 'ios') {\n                  if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {\n                    _this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField);\n                  }\n                } else {\n                  if (textInputBottomPosition > keyboardPosition) {\n                    keyboardSpace = keyboardSpace - (textInputBottomPosition - keyboardPosition);\n\n                    _this.setState({\n                      keyboardSpace: keyboardSpace\n                    });\n\n                    _this.scrollForExtraHeightOnAndroid(totalExtraHeight);\n                  } else if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {\n                    _this.scrollForExtraHeightOnAndroid(totalExtraHeight - (keyboardPosition - textInputBottomPosition));\n                  }\n                }\n              });\n            }\n          });\n        }\n\n        if (!_this.props.resetScrollToCoords) {\n          if (!_this.defaultResetScrollToCoords) {\n            _this.defaultResetScrollToCoords = _this.position;\n          }\n        }\n      };\n\n      _this._resetKeyboardSpace = function () {\n        var keyboardSpace = _this.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n\n        _this.setState({\n          keyboardSpace: keyboardSpace\n        });\n\n        if (_this.props.enableResetScrollToCoords === false) {\n          _this.defaultResetScrollToCoords = null;\n          return;\n        } else if (_this.props.resetScrollToCoords) {\n          _this.scrollToPosition(_this.props.resetScrollToCoords.x, _this.props.resetScrollToCoords.y, true);\n        } else {\n          if (_this.defaultResetScrollToCoords) {\n            _this.scrollToPosition(_this.defaultResetScrollToCoords.x, _this.defaultResetScrollToCoords.y, true);\n\n            _this.defaultResetScrollToCoords = null;\n          } else {\n            _this.scrollToPosition(0, 0, true);\n          }\n        }\n      };\n\n      _this._scrollToFocusedInputWithNodeHandle = function (nodeID, extraHeight, keyboardOpeningTime) {\n        if (extraHeight === undefined) {\n          extraHeight = _this.props.extraHeight;\n        }\n\n        var reactNode = (0, _reactNative.findNodeHandle)(nodeID);\n\n        _this.scrollToFocusedInput(reactNode, extraHeight + _this.props.extraScrollHeight, keyboardOpeningTime !== undefined ? keyboardOpeningTime : _this.props.keyboardOpeningTime || 0);\n      };\n\n      _this._handleOnScroll = function (e) {\n        _this.position = e.nativeEvent.contentOffset;\n      };\n\n      _this._handleRef = function (ref) {\n        _this._rnkasv_keyboardView = ref ? hocOptions.extractNativeRef(ref) : ref;\n\n        if (_this.props.innerRef) {\n          _this.props.innerRef(_this._rnkasv_keyboardView);\n        }\n      };\n\n      _this.update = function () {\n        var currentlyFocusedField = _reactNative.TextInput.State.currentlyFocusedInput ? (0, _reactNative.findNodeHandle)(_reactNative.TextInput.State.currentlyFocusedInput()) : _reactNative.TextInput.State.currentlyFocusedField();\n\n        var responder = _this.getScrollResponder();\n\n        if (!currentlyFocusedField || !responder) {\n          return;\n        }\n\n        _this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField);\n      };\n\n      _this.keyboardWillShowEvent = undefined;\n      _this.keyboardWillHideEvent = undefined;\n      _this.callbacks = {};\n      _this.position = {\n        x: 0,\n        y: 0\n      };\n      _this.defaultResetScrollToCoords = null;\n\n      var _keyboardSpace = props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n\n      _this.state = {\n        keyboardSpace: _keyboardSpace\n      };\n      return _this;\n    }\n\n    (0, _createClass2.default)(_class, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        this.mountedComponent = true;\n\n        if (_reactNative.Platform.OS === 'ios') {\n          this.keyboardWillShowEvent = _reactNative.Keyboard.addListener('keyboardWillShow', this._updateKeyboardSpace);\n          this.keyboardWillHideEvent = _reactNative.Keyboard.addListener('keyboardWillHide', this._resetKeyboardSpace);\n        } else if (_reactNative.Platform.OS === 'android' && this.props.enableOnAndroid) {\n          this.keyboardWillShowEvent = _reactNative.Keyboard.addListener('keyboardDidShow', this._updateKeyboardSpace);\n          this.keyboardWillHideEvent = _reactNative.Keyboard.addListener('keyboardDidHide', this._resetKeyboardSpace);\n        }\n\n        supportedKeyboardEvents.forEach(function (eventName) {\n          var callbackName = keyboardEventToCallbackName(eventName);\n\n          if (_this2.props[callbackName]) {\n            _this2.callbacks[eventName] = _reactNative.Keyboard.addListener(eventName, _this2.props[callbackName]);\n          }\n        });\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        if (this.props.viewIsInsideTabBar !== prevProps.viewIsInsideTabBar) {\n          var keyboardSpace = this.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n\n          if (this.state.keyboardSpace !== keyboardSpace) {\n            this.setState({\n              keyboardSpace: keyboardSpace\n            });\n          }\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.mountedComponent = false;\n        this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove();\n        this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove();\n        Object.values(this.callbacks).forEach(function (callback) {\n          return callback.remove();\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            enableOnAndroid = _this$props.enableOnAndroid,\n            contentContainerStyle = _this$props.contentContainerStyle,\n            onScroll = _this$props.onScroll;\n        var newContentContainerStyle;\n\n        if (_reactNative.Platform.OS === 'android' && enableOnAndroid) {\n          newContentContainerStyle = [].concat(contentContainerStyle).concat({\n            paddingBottom: ((contentContainerStyle || {}).paddingBottom || 0) + this.state.keyboardSpace\n          });\n        }\n\n        var refProps = (0, _defineProperty2.default)({}, hocOptions.refPropName, this._handleRef);\n        return _react.default.createElement(ScrollableComponent, (0, _extends2.default)({}, refProps, {\n          keyboardDismissMode: \"interactive\",\n          contentInset: {\n            bottom: this.state.keyboardSpace\n          },\n          automaticallyAdjustContentInsets: false,\n          showsVerticalScrollIndicator: true,\n          scrollEventThrottle: 1\n        }, this.props, {\n          contentContainerStyle: newContentContainerStyle || contentContainerStyle,\n          keyboardSpace: this.state.keyboardSpace,\n          getScrollResponder: this.getScrollResponder,\n          scrollToPosition: this.scrollToPosition,\n          scrollToEnd: this.scrollToEnd,\n          scrollForExtraHeightOnAndroid: this.scrollForExtraHeightOnAndroid,\n          scrollToFocusedInput: this.scrollToFocusedInput,\n          scrollIntoView: this.scrollIntoView,\n          resetKeyboardSpace: this._resetKeyboardSpace,\n          handleOnScroll: this._handleOnScroll,\n          update: this.update,\n          onScroll: _reactNative.Animated.forkEvent(onScroll, this._handleOnScroll),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n    return _class;\n  }(_react.default.Component), _class.displayName = \"KeyboardAware\" + getDisplayName(ScrollableComponent), _class.propTypes = _objectSpread({\n    viewIsInsideTabBar: _propTypes.default.bool,\n    resetScrollToCoords: _propTypes.default.shape({\n      x: _propTypes.default.number.isRequired,\n      y: _propTypes.default.number.isRequired\n    }),\n    enableResetScrollToCoords: _propTypes.default.bool,\n    enableAutomaticScroll: _propTypes.default.bool,\n    extraHeight: _propTypes.default.number,\n    extraScrollHeight: _propTypes.default.number,\n    keyboardOpeningTime: _propTypes.default.number,\n    onScroll: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n    update: _propTypes.default.func,\n    contentContainerStyle: _propTypes.default.any,\n    enableOnAndroid: _propTypes.default.bool,\n    innerRef: _propTypes.default.func\n  }, keyboardEventPropTypes), _class.defaultProps = {\n    enableAutomaticScroll: hocOptions.enableAutomaticScroll,\n    extraHeight: hocOptions.extraHeight,\n    extraScrollHeight: hocOptions.extraScrollHeight,\n    enableResetScrollToCoords: hocOptions.enableResetScrollToCoords,\n    keyboardOpeningTime: hocOptions.keyboardOpeningTime,\n    viewIsInsideTabBar: hocOptions.viewIsInsideTabBar,\n    enableOnAndroid: hocOptions.enableOnAndroid\n  }, _temp;\n}\n\nvar listenToKeyboardEvents = function listenToKeyboardEvents(configOrComp) {\n  if (typeof configOrComp === 'object' && !configOrComp.displayName) {\n    return function (Comp) {\n      return KeyboardAwareHOC(Comp, configOrComp);\n    };\n  } else {\n    return KeyboardAwareHOC(configOrComp);\n  }\n};\n\nvar _default = listenToKeyboardEvents;\nexports.default = _default;","map":{"version":3,"sources":["E:/UTCH/Cuatrimestre 4/Diseño de Apps/reactNative/actividad-10/node_modules/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareHOC.js"],"names":["_KAM_DEFAULT_TAB_BAR_HEIGHT","_KAM_KEYBOARD_OPENING_TIME","_KAM_EXTRA_HEIGHT","supportedKeyboardEvents","keyboardEventToCallbackName","eventName","toUpperCase","substring","keyboardEventPropTypes","reduce","acc","PropTypes","func","keyboardAwareHOCTypeEvents","Function","getDisplayName","WrappedComponent","displayName","name","ScrollIntoViewDefaultOptions","enableOnAndroid","contentContainerStyle","undefined","enableAutomaticScroll","extraHeight","extraScrollHeight","enableResetScrollToCoords","keyboardOpeningTime","viewIsInsideTabBar","refPropName","extractNativeRef","ref","shouldCallGetNode","Platform","constants","reactNativeVersion","major","minor","getNode","KeyboardAwareHOC","ScrollableComponent","userOptions","hocOptions","props","getScrollResponder","_rnkasv_keyboardView","scrollToPosition","x","y","animated","responder","scrollResponderScrollTo","scrollTo","scrollToEnd","scrollResponderScrollToEnd","scrollForExtraHeightOnAndroid","position","scrollToFocusedInput","reactNode","setTimeout","mountedComponent","scrollResponderScrollNativeHandleToKeyboard","scrollIntoView","element","options","Promise","all","_measureElement","parentLayout","childLayout","getScrollPosition","_defaultGetScrollPosition","contentOffset","Math","max","node","resolve","UIManager","measureInWindow","width","height","_updateKeyboardSpace","frames","keyboardSpace","endCoordinates","setState","currentlyFocusedField","TextInput","State","currentlyFocusedInput","viewIsDescendantOf","getInnerViewNode","isAncestor","textInputBottomPosition","keyboardPosition","screenY","totalExtraHeight","OS","_scrollToFocusedInputWithNodeHandle","resetScrollToCoords","defaultResetScrollToCoords","_resetKeyboardSpace","nodeID","_handleOnScroll","e","nativeEvent","_handleRef","innerRef","update","keyboardWillShowEvent","keyboardWillHideEvent","callbacks","state","Keyboard","addListener","forEach","callbackName","prevProps","remove","Object","values","callback","onScroll","newContentContainerStyle","concat","paddingBottom","refProps","bottom","Animated","forkEvent","React","Component","propTypes","bool","shape","number","isRequired","oneOfType","object","any","defaultProps","listenToKeyboardEvents","configOrComp","Comp"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Keyboard,\r\n  Platform,\r\n  UIManager,\r\n  TextInput,\r\n  findNodeHandle,\r\n  Animated\r\n} from 'react-native'\r\nimport { isIphoneX } from 'react-native-iphone-x-helper'\r\nimport type { KeyboardAwareInterface } from './KeyboardAwareInterface'\r\n\r\nconst _KAM_DEFAULT_TAB_BAR_HEIGHT: number = isIphoneX() ? 83 : 49\r\nconst _KAM_KEYBOARD_OPENING_TIME: number = 250\r\nconst _KAM_EXTRA_HEIGHT: number = 75\r\n\r\nconst supportedKeyboardEvents = [\r\n  'keyboardWillShow',\r\n  'keyboardDidShow',\r\n  'keyboardWillHide',\r\n  'keyboardDidHide',\r\n  'keyboardWillChangeFrame',\r\n  'keyboardDidChangeFrame'\r\n]\r\nconst keyboardEventToCallbackName = (eventName: string) =>\r\n  'on' + eventName[0].toUpperCase() + eventName.substring(1)\r\nconst keyboardEventPropTypes = supportedKeyboardEvents.reduce(\r\n  (acc: Object, eventName: string) => ({\r\n    ...acc,\r\n    [keyboardEventToCallbackName(eventName)]: PropTypes.func\r\n  }),\r\n  {}\r\n)\r\nconst keyboardAwareHOCTypeEvents = supportedKeyboardEvents.reduce(\r\n  (acc: Object, eventName: string) => ({\r\n    ...acc,\r\n    [keyboardEventToCallbackName(eventName)]: Function\r\n  }),\r\n  {}\r\n)\r\n\r\nexport type KeyboardAwareHOCProps = {\r\n  viewIsInsideTabBar?: boolean,\r\n  resetScrollToCoords?: {\r\n    x: number,\r\n    y: number\r\n  },\r\n  enableResetScrollToCoords?: boolean,\r\n  enableAutomaticScroll?: boolean,\r\n  extraHeight?: number,\r\n  extraScrollHeight?: number,\r\n  keyboardOpeningTime?: number,\r\n  onScroll?: Function,\r\n  update?: Function,\r\n  contentContainerStyle?: any,\r\n  enableOnAndroid?: boolean,\r\n  innerRef?: Function,\r\n  ...keyboardAwareHOCTypeEvents\r\n}\r\nexport type KeyboardAwareHOCState = {\r\n  keyboardSpace: number\r\n}\r\n\r\nexport type ElementLayout = {\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n}\r\n\r\nexport type ContentOffset = {\r\n  x: number,\r\n  y: number\r\n}\r\n\r\nexport type ScrollPosition = {\r\n  x: number,\r\n  y: number,\r\n  animated: boolean\r\n}\r\n\r\nexport type ScrollIntoViewOptions = ?{\r\n  getScrollPosition?: (\r\n    parentLayout: ElementLayout,\r\n    childLayout: ElementLayout,\r\n    contentOffset: ContentOffset\r\n  ) => ScrollPosition\r\n}\r\n\r\nexport type KeyboardAwareHOCOptions = ?{\r\n  enableOnAndroid: boolean,\r\n  contentContainerStyle: ?Object,\r\n  enableAutomaticScroll: boolean,\r\n  extraHeight: number,\r\n  extraScrollHeight: number,\r\n  enableResetScrollToCoords: boolean,\r\n  keyboardOpeningTime: number,\r\n  viewIsInsideTabBar: boolean,\r\n  refPropName: string,\r\n  extractNativeRef: Function\r\n}\r\n\r\nfunction getDisplayName(WrappedComponent: React$Component) {\r\n  return (\r\n    (WrappedComponent &&\r\n      (WrappedComponent.displayName || WrappedComponent.name)) ||\r\n    'Component'\r\n  )\r\n}\r\n\r\nconst ScrollIntoViewDefaultOptions: KeyboardAwareHOCOptions = {\r\n  enableOnAndroid: false,\r\n  contentContainerStyle: undefined,\r\n  enableAutomaticScroll: true,\r\n  extraHeight: _KAM_EXTRA_HEIGHT,\r\n  extraScrollHeight: 0,\r\n  enableResetScrollToCoords: true,\r\n  keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\r\n  viewIsInsideTabBar: false,\r\n\r\n  // The ref prop name that will be passed to the wrapped component to obtain a ref\r\n  // If your ScrollView is already wrapped, maybe the wrapper permit to get a ref\r\n  // For example, with glamorous-native ScrollView, you should use \"innerRef\"\r\n  refPropName: 'ref',\r\n  // Sometimes the ref you get is a ref to a wrapped view (ex: Animated.ScrollView)\r\n  // We need access to the imperative API of a real native ScrollView so we need extraction logic\r\n  extractNativeRef: (ref: Object) => {\r\n    // getNode() permit to support Animated.ScrollView automatically, but is deprecated since RN 0.62\r\n    // see https://github.com/facebook/react-native/issues/19650\r\n    // see https://stackoverflow.com/questions/42051368/scrollto-is-undefined-on-animated-scrollview/48786374\r\n    // see https://github.com/facebook/react-native/commit/66e72bb4e00aafbcb9f450ed5db261d98f99f82a\r\n    const shouldCallGetNode = !Platform.constants || (Platform.constants.reactNativeVersion.major === 0 && Platform.constants.reactNativeVersion.minor < 62)\r\n    if (ref.getNode && shouldCallGetNode) {\r\n      return ref.getNode()\r\n    } else {\r\n      return ref\r\n    }\r\n  }\r\n}\r\n\r\nfunction KeyboardAwareHOC(\r\n  ScrollableComponent: React$Component,\r\n  userOptions: KeyboardAwareHOCOptions = {}\r\n) {\r\n  const hocOptions: KeyboardAwareHOCOptions = {\r\n    ...ScrollIntoViewDefaultOptions,\r\n    ...userOptions\r\n  }\r\n\r\n  return class\r\n    extends React.Component<KeyboardAwareHOCProps, KeyboardAwareHOCState>\r\n    implements KeyboardAwareInterface {\r\n    _rnkasv_keyboardView: any\r\n    keyboardWillShowEvent: ?Function\r\n    keyboardWillHideEvent: ?Function\r\n    position: ContentOffset\r\n    defaultResetScrollToCoords: ?{ x: number, y: number }\r\n    mountedComponent: boolean\r\n    handleOnScroll: Function\r\n    state: KeyboardAwareHOCState\r\n    static displayName = `KeyboardAware${getDisplayName(ScrollableComponent)}`\r\n\r\n    static propTypes = {\r\n      viewIsInsideTabBar: PropTypes.bool,\r\n      resetScrollToCoords: PropTypes.shape({\r\n        x: PropTypes.number.isRequired,\r\n        y: PropTypes.number.isRequired\r\n      }),\r\n      enableResetScrollToCoords: PropTypes.bool,\r\n      enableAutomaticScroll: PropTypes.bool,\r\n      extraHeight: PropTypes.number,\r\n      extraScrollHeight: PropTypes.number,\r\n      keyboardOpeningTime: PropTypes.number,\r\n      onScroll: PropTypes.oneOfType([\r\n        PropTypes.func, // Normal listener\r\n        PropTypes.object // Animated.event listener\r\n      ]),\r\n      update: PropTypes.func,\r\n      contentContainerStyle: PropTypes.any,\r\n      enableOnAndroid: PropTypes.bool,\r\n      innerRef: PropTypes.func,\r\n      ...keyboardEventPropTypes\r\n    }\r\n\r\n    // HOC options are used to init default props, so that these options can be overriden with component props\r\n    static defaultProps = {\r\n      enableAutomaticScroll: hocOptions.enableAutomaticScroll,\r\n      extraHeight: hocOptions.extraHeight,\r\n      extraScrollHeight: hocOptions.extraScrollHeight,\r\n      enableResetScrollToCoords: hocOptions.enableResetScrollToCoords,\r\n      keyboardOpeningTime: hocOptions.keyboardOpeningTime,\r\n      viewIsInsideTabBar: hocOptions.viewIsInsideTabBar,\r\n      enableOnAndroid: hocOptions.enableOnAndroid\r\n    }\r\n\r\n    constructor(props: KeyboardAwareHOCProps) {\r\n      super(props)\r\n      this.keyboardWillShowEvent = undefined\r\n      this.keyboardWillHideEvent = undefined\r\n      this.callbacks = {}\r\n      this.position = { x: 0, y: 0 }\r\n      this.defaultResetScrollToCoords = null\r\n      const keyboardSpace: number = props.viewIsInsideTabBar\r\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\r\n        : 0\r\n      this.state = { keyboardSpace }\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.mountedComponent = true\r\n      // Keyboard events\r\n      if (Platform.OS === 'ios') {\r\n        this.keyboardWillShowEvent = Keyboard.addListener(\r\n          'keyboardWillShow',\r\n          this._updateKeyboardSpace\r\n        )\r\n        this.keyboardWillHideEvent = Keyboard.addListener(\r\n          'keyboardWillHide',\r\n          this._resetKeyboardSpace\r\n        )\r\n      } else if (Platform.OS === 'android' && this.props.enableOnAndroid) {\r\n        this.keyboardWillShowEvent = Keyboard.addListener(\r\n          'keyboardDidShow',\r\n          this._updateKeyboardSpace\r\n        )\r\n        this.keyboardWillHideEvent = Keyboard.addListener(\r\n          'keyboardDidHide',\r\n          this._resetKeyboardSpace\r\n        )\r\n      }\r\n\r\n      supportedKeyboardEvents.forEach((eventName: string) => {\r\n        const callbackName = keyboardEventToCallbackName(eventName)\r\n        if (this.props[callbackName]) {\r\n          this.callbacks[eventName] = Keyboard.addListener(\r\n            eventName,\r\n            this.props[callbackName]\r\n          )\r\n        }\r\n      })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: KeyboardAwareHOCProps) {\r\n      if (this.props.viewIsInsideTabBar !== prevProps.viewIsInsideTabBar) {\r\n        const keyboardSpace: number = this.props.viewIsInsideTabBar\r\n          ? _KAM_DEFAULT_TAB_BAR_HEIGHT\r\n          : 0\r\n        if (this.state.keyboardSpace !== keyboardSpace) {\r\n          this.setState({ keyboardSpace })\r\n        }\r\n      }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.mountedComponent = false\r\n      this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove()\r\n      this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove()\r\n      Object.values(this.callbacks).forEach((callback: Object) =>\r\n        callback.remove()\r\n      )\r\n    }\r\n\r\n    getScrollResponder = () => {\r\n      return (\r\n        this._rnkasv_keyboardView &&\r\n        this._rnkasv_keyboardView.getScrollResponder &&\r\n        this._rnkasv_keyboardView.getScrollResponder()\r\n      )\r\n    }\r\n\r\n    scrollToPosition = (x: number, y: number, animated: boolean = true) => {\r\n      const responder = this.getScrollResponder()\r\n      if (!responder) {\r\n        return\r\n      }\r\n      if (responder.scrollResponderScrollTo) {\r\n        // React Native < 0.65\r\n        responder.scrollResponderScrollTo({ x, y, animated })\r\n      } else if (responder.scrollTo) {\r\n        // React Native >= 0.65\r\n        responder.scrollTo({ x, y, animated })\r\n      }\r\n    }\r\n\r\n    scrollToEnd = (animated?: boolean = true) => {\r\n      const responder = this.getScrollResponder()\r\n      if (!responder) {\r\n        return\r\n      }\r\n      if (responder.scrollResponderScrollToEnd) {\r\n        // React Native < 0.65\r\n        responder.scrollResponderScrollToEnd({ animated })\r\n      } else if (responder.scrollToEnd) {\r\n        // React Native >= 0.65\r\n        responder.scrollToEnd({ animated })\r\n      }\r\n    }\r\n\r\n    scrollForExtraHeightOnAndroid = (extraHeight: number) => {\r\n      this.scrollToPosition(0, this.position.y + extraHeight, true)\r\n    }\r\n\r\n    /**\r\n     * @param keyboardOpeningTime: takes a different keyboardOpeningTime in consideration.\r\n     * @param extraHeight: takes an extra height in consideration.\r\n     */\r\n    scrollToFocusedInput = (\r\n      reactNode: any,\r\n      extraHeight?: number,\r\n      keyboardOpeningTime?: number\r\n    ) => {\r\n      if (extraHeight === undefined) {\r\n        extraHeight = this.props.extraHeight || 0\r\n      }\r\n      if (keyboardOpeningTime === undefined) {\r\n        keyboardOpeningTime = this.props.keyboardOpeningTime || 0\r\n      }\r\n      setTimeout(() => {\r\n        if (!this.mountedComponent) {\r\n          return\r\n        }\r\n        const responder = this.getScrollResponder()\r\n        responder &&\r\n          responder.scrollResponderScrollNativeHandleToKeyboard(\r\n            reactNode,\r\n            extraHeight,\r\n            true\r\n          )\r\n      }, keyboardOpeningTime)\r\n    }\r\n\r\n    scrollIntoView = async (\r\n      element: React.Element<*>,\r\n      options: ScrollIntoViewOptions = {}\r\n    ) => {\r\n      if (!this._rnkasv_keyboardView || !element) {\r\n        return\r\n      }\r\n\r\n      const [parentLayout, childLayout] = await Promise.all([\r\n        this._measureElement(this._rnkasv_keyboardView),\r\n        this._measureElement(element)\r\n      ])\r\n\r\n      const getScrollPosition =\r\n        options.getScrollPosition || this._defaultGetScrollPosition\r\n      const { x, y, animated } = getScrollPosition(\r\n        parentLayout,\r\n        childLayout,\r\n        this.position\r\n      )\r\n      this.scrollToPosition(x, y, animated)\r\n    }\r\n\r\n    _defaultGetScrollPosition = (\r\n      parentLayout: ElementLayout,\r\n      childLayout: ElementLayout,\r\n      contentOffset: ContentOffset\r\n    ): ScrollPosition => {\r\n      return {\r\n        x: 0,\r\n        y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y),\r\n        animated: true\r\n      }\r\n    }\r\n\r\n    _measureElement = (element: React.Element<*>): Promise<ElementLayout> => {\r\n      const node = findNodeHandle(element)\r\n      return new Promise((resolve: ElementLayout => void) => {\r\n        UIManager.measureInWindow(\r\n          node,\r\n          (x: number, y: number, width: number, height: number) => {\r\n            resolve({ x, y, width, height })\r\n          }\r\n        )\r\n      })\r\n    }\r\n\r\n    // Keyboard actions\r\n    _updateKeyboardSpace = (frames: Object) => {\r\n      // Automatically scroll to focused TextInput\r\n      if (this.props.enableAutomaticScroll) {\r\n        let keyboardSpace: number =\r\n          frames.endCoordinates.height + this.props.extraScrollHeight\r\n        if (this.props.viewIsInsideTabBar) {\r\n          keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT\r\n        }\r\n        this.setState({ keyboardSpace })\r\n        const currentlyFocusedField =  TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField()\r\n        const responder = this.getScrollResponder()\r\n        if (!currentlyFocusedField || !responder) {\r\n          return\r\n        }\r\n        UIManager.viewIsDescendantOf(\r\n          currentlyFocusedField,\r\n          responder.getInnerViewNode(),\r\n          (isAncestor: boolean) => {\r\n            if (isAncestor) {\r\n              // Check if the TextInput will be hidden by the keyboard\r\n              UIManager.measureInWindow(\r\n                currentlyFocusedField,\r\n                (x: number, y: number, width: number, height: number) => {\r\n                  const textInputBottomPosition = y + height\r\n                  const keyboardPosition = frames.endCoordinates.screenY\r\n                  const totalExtraHeight =\r\n                    this.props.extraScrollHeight + this.props.extraHeight\r\n                  if (Platform.OS === 'ios') {\r\n                    if (\r\n                      textInputBottomPosition >\r\n                      keyboardPosition - totalExtraHeight\r\n                    ) {\r\n                      this._scrollToFocusedInputWithNodeHandle(\r\n                        currentlyFocusedField\r\n                      )\r\n                    }\r\n                  } else {\r\n                    // On android, the system would scroll the text input just\r\n                    // above the keyboard so we just neet to scroll the extra\r\n                    // height part\r\n                    if (textInputBottomPosition > keyboardPosition) {\r\n                      // Since the system already scrolled the whole view up\r\n                      // we should reduce that amount\r\n                      keyboardSpace =\r\n                        keyboardSpace -\r\n                        (textInputBottomPosition - keyboardPosition)\r\n                      this.setState({ keyboardSpace })\r\n                      this.scrollForExtraHeightOnAndroid(totalExtraHeight)\r\n                    } else if (\r\n                      textInputBottomPosition >\r\n                      keyboardPosition - totalExtraHeight\r\n                    ) {\r\n                      this.scrollForExtraHeightOnAndroid(\r\n                        totalExtraHeight -\r\n                          (keyboardPosition - textInputBottomPosition)\r\n                      )\r\n                    }\r\n                  }\r\n                }\r\n              )\r\n            }\r\n          }\r\n        )\r\n      }\r\n      if (!this.props.resetScrollToCoords) {\r\n        if (!this.defaultResetScrollToCoords) {\r\n          this.defaultResetScrollToCoords = this.position\r\n        }\r\n      }\r\n    }\r\n\r\n    _resetKeyboardSpace = () => {\r\n      const keyboardSpace: number = this.props.viewIsInsideTabBar\r\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\r\n        : 0\r\n      this.setState({ keyboardSpace })\r\n      // Reset scroll position after keyboard dismissal\r\n      if (this.props.enableResetScrollToCoords === false) {\r\n        this.defaultResetScrollToCoords = null\r\n        return\r\n      } else if (this.props.resetScrollToCoords) {\r\n        this.scrollToPosition(\r\n          this.props.resetScrollToCoords.x,\r\n          this.props.resetScrollToCoords.y,\r\n          true\r\n        )\r\n      } else {\r\n        if (this.defaultResetScrollToCoords) {\r\n          this.scrollToPosition(\r\n            this.defaultResetScrollToCoords.x,\r\n            this.defaultResetScrollToCoords.y,\r\n            true\r\n          )\r\n          this.defaultResetScrollToCoords = null\r\n        } else {\r\n          this.scrollToPosition(0, 0, true)\r\n        }\r\n      }\r\n    }\r\n\r\n    _scrollToFocusedInputWithNodeHandle = (\r\n      nodeID: number,\r\n      extraHeight?: number,\r\n      keyboardOpeningTime?: number\r\n    ) => {\r\n      if (extraHeight === undefined) {\r\n        extraHeight = this.props.extraHeight\r\n      }\r\n      const reactNode = findNodeHandle(nodeID)\r\n      this.scrollToFocusedInput(\r\n        reactNode,\r\n        extraHeight + this.props.extraScrollHeight,\r\n        keyboardOpeningTime !== undefined\r\n          ? keyboardOpeningTime\r\n          : this.props.keyboardOpeningTime || 0\r\n      )\r\n    }\r\n\r\n    _handleOnScroll = (\r\n      e: SyntheticEvent<*> & { nativeEvent: { contentOffset: number } }\r\n    ) => {\r\n      this.position = e.nativeEvent.contentOffset\r\n    }\r\n\r\n    _handleRef = (ref: React.Component<*>) => {\r\n      this._rnkasv_keyboardView = ref ? hocOptions.extractNativeRef(ref) : ref\r\n      if (this.props.innerRef) {\r\n        this.props.innerRef(this._rnkasv_keyboardView)\r\n      }\r\n    }\r\n\r\n    update = () => {\r\n      const currentlyFocusedField =  TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField()\r\n      const responder = this.getScrollResponder()\r\n\r\n      if (!currentlyFocusedField || !responder) {\r\n        return\r\n      }\r\n\r\n      this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField)\r\n    }\r\n\r\n    render() {\r\n      const { enableOnAndroid, contentContainerStyle, onScroll } = this.props\r\n      let newContentContainerStyle\r\n      if (Platform.OS === 'android' && enableOnAndroid) {\r\n        newContentContainerStyle = [].concat(contentContainerStyle).concat({\r\n          paddingBottom:\r\n            ((contentContainerStyle || {}).paddingBottom || 0) +\r\n            this.state.keyboardSpace\r\n        })\r\n      }\r\n      const refProps = { [hocOptions.refPropName]: this._handleRef }\r\n      return (\r\n        <ScrollableComponent\r\n          {...refProps}\r\n          keyboardDismissMode='interactive'\r\n          contentInset={{ bottom: this.state.keyboardSpace }}\r\n          automaticallyAdjustContentInsets={false}\r\n          showsVerticalScrollIndicator={true}\r\n          scrollEventThrottle={1}\r\n          {...this.props}\r\n          contentContainerStyle={\r\n            newContentContainerStyle || contentContainerStyle\r\n          }\r\n          keyboardSpace={this.state.keyboardSpace}\r\n          getScrollResponder={this.getScrollResponder}\r\n          scrollToPosition={this.scrollToPosition}\r\n          scrollToEnd={this.scrollToEnd}\r\n          scrollForExtraHeightOnAndroid={this.scrollForExtraHeightOnAndroid}\r\n          scrollToFocusedInput={this.scrollToFocusedInput}\r\n          scrollIntoView={this.scrollIntoView}\r\n          resetKeyboardSpace={this._resetKeyboardSpace}\r\n          handleOnScroll={this._handleOnScroll}\r\n          update={this.update}\r\n          onScroll={Animated.forkEvent(onScroll, this._handleOnScroll)}\r\n        />\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n// Allow to pass options, without breaking change, and curried for composition\r\n// listenToKeyboardEvents(ScrollView);\r\n// listenToKeyboardEvents(options)(Comp);\r\nconst listenToKeyboardEvents = (configOrComp: any) => {\r\n  if (typeof configOrComp === 'object' && !configOrComp.displayName) {\r\n    return (Comp: Function) => KeyboardAwareHOC(Comp, configOrComp)\r\n  } else {\r\n    return KeyboardAwareHOC(configOrComp)\r\n  }\r\n}\r\n\r\nexport default listenToKeyboardEvents\r\n"]},"metadata":{},"sourceType":"script"}