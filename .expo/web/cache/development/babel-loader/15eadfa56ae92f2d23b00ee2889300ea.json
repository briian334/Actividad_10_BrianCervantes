{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScreenContainer = exports.Screen = exports.NativeScreenContainer = exports.NativeScreen = void 0;\nexports.enableScreens = enableScreens;\nexports.screensEnabled = screensEnabled;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _debounce = _interopRequireDefault(require(\"debounce\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsxFileName = \"E:\\\\UTCH\\\\Cuatrimestre 4\\\\Dise\\xF1o de Apps\\\\reactNative\\\\actividad-10\\\\node_modules\\\\react-native-screens\\\\src\\\\screens.web.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar _shouldEnableScreens = true;\n\nfunction enableScreens() {\n  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  if (shouldEnableScreens) {\n    console.warn('react-native-screens is not fully supported on this platform yet.');\n  }\n\n  _shouldEnableScreens = shouldEnableScreens;\n}\n\nfunction screensEnabled() {\n  return _shouldEnableScreens;\n}\n\nfunction isAnimatedValue(value) {\n  return value && value.__getValue && value.addListener;\n}\n\nfunction isPropTruthy(prop) {\n  var activeValue = prop;\n\n  if (isAnimatedValue(prop)) {\n    activeValue = prop.__getValue();\n  }\n\n  return !!activeValue;\n}\n\nvar Screen = function (_React$Component) {\n  (0, _inherits2.default)(Screen, _React$Component);\n\n  var _super = _createSuper(Screen);\n\n  function Screen(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Screen);\n    _this = _super.call(this, props);\n    _this.listenerId = null;\n\n    _this._addListener = function (possibleListener) {\n      if (_this.listenerId) throw new Error('Screen: Attempting to observe an animated value while another value is already observed.');\n\n      if (isAnimatedValue(possibleListener)) {\n        _this.listenerId = possibleListener.addListener(_this._onAnimatedValueUpdated);\n      }\n    };\n\n    _this._removeListener = function (possibleListener) {\n      if (isAnimatedValue(possibleListener)) {\n        possibleListener.removeListener(_this.listenerId);\n        _this.listenerId = null;\n      }\n    };\n\n    _this._onAnimatedValueUpdated = function (_ref) {\n      var value = _ref.value;\n\n      _this._updateDisplay(!!value);\n    };\n\n    _this._updateDisplay = function (isActive) {\n      if (isActive === undefined) {\n        isActive = isPropTruthy(_this.props.active);\n      }\n\n      var display = isActive ? 'flex' : 'none';\n\n      _this.setNativeProps({\n        style: {\n          display: display\n        }\n      });\n    };\n\n    _this.setNativeProps = function (nativeProps) {\n      if (_this._view) {\n        _this._view.setNativeProps(nativeProps);\n      }\n    };\n\n    _this._setRef = function (view) {\n      _this._view = view;\n\n      _this._updateDisplay();\n    };\n\n    _this._onAnimatedValueUpdated = (0, _debounce.default)(_this._onAnimatedValueUpdated, 10);\n\n    _this._addListener(props.active);\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Screen, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._removeListener(this.props.active);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(_ref2) {\n      var nextActive = _ref2.active;\n      var active = this.props.active;\n\n      if (nextActive !== active) {\n        this._removeListener(active);\n\n        this._addListener(nextActive);\n\n        this._updateDisplay(isPropTruthy(nextActive));\n\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, this.props, {\n        ref: this._setRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n  return Screen;\n}(_react.default.Component);\n\nexports.Screen = Screen;\nScreen.defaultProps = {\n  active: true\n};\nvar ScreenContainer = _reactNative.View;\nexports.ScreenContainer = ScreenContainer;\nvar NativeScreen = _reactNative.View;\nexports.NativeScreen = NativeScreen;\nvar NativeScreenContainer = _reactNative.View;\nexports.NativeScreenContainer = NativeScreenContainer;","map":{"version":3,"sources":["E:/UTCH/Cuatrimestre 4/Dise√±o de Apps/reactNative/actividad-10/node_modules/react-native-screens/src/screens.web.js"],"names":["_shouldEnableScreens","enableScreens","shouldEnableScreens","console","warn","screensEnabled","isAnimatedValue","value","__getValue","addListener","isPropTruthy","prop","activeValue","Screen","props","listenerId","_addListener","possibleListener","Error","_onAnimatedValueUpdated","_removeListener","removeListener","_updateDisplay","isActive","undefined","active","display","setNativeProps","style","nativeProps","_view","_setRef","view","nextActive","React","Component","defaultProps","ScreenContainer","View","NativeScreen","NativeScreenContainer"],"mappings":"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","sourcesContent":["import debounce from 'debounce';\r\nimport React from 'react';\r\nimport { Animated, View } from 'react-native';\r\n\r\nlet _shouldEnableScreens = true;\r\n\r\nexport function enableScreens(shouldEnableScreens = true) {\r\n  if (shouldEnableScreens) {\r\n    console.warn(\r\n      'react-native-screens is not fully supported on this platform yet.'\r\n    );\r\n  }\r\n  _shouldEnableScreens = shouldEnableScreens;\r\n}\r\n\r\nexport function screensEnabled() {\r\n  return _shouldEnableScreens;\r\n}\r\n\r\nfunction isAnimatedValue(value) {\r\n  return value && value.__getValue && value.addListener;\r\n}\r\n\r\nfunction isPropTruthy(prop) {\r\n  let activeValue = prop;\r\n  if (isAnimatedValue(prop)) {\r\n    activeValue = prop.__getValue();\r\n  }\r\n\r\n  return !!activeValue;\r\n}\r\n\r\nexport class Screen extends React.Component {\r\n  static defaultProps = {\r\n    active: true,\r\n  };\r\n\r\n  listenerId = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this._onAnimatedValueUpdated = debounce(this._onAnimatedValueUpdated, 10);\r\n    this._addListener(props.active);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._removeListener(this.props.active);\r\n  }\r\n\r\n  _addListener = possibleListener => {\r\n    if (this.listenerId)\r\n      throw new Error(\r\n        'Screen: Attempting to observe an animated value while another value is already observed.'\r\n      );\r\n    if (isAnimatedValue(possibleListener)) {\r\n      this.listenerId = possibleListener.addListener(\r\n        this._onAnimatedValueUpdated\r\n      );\r\n    }\r\n  };\r\n\r\n  _removeListener = possibleListener => {\r\n    if (isAnimatedValue(possibleListener)) {\r\n      possibleListener.removeListener(this.listenerId);\r\n      this.listenerId = null;\r\n    }\r\n  };\r\n\r\n  shouldComponentUpdate({ active: nextActive }) {\r\n    const { active } = this.props;\r\n    if (nextActive !== active) {\r\n      this._removeListener(active);\r\n      this._addListener(nextActive);\r\n      this._updateDisplay(isPropTruthy(nextActive));\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  _onAnimatedValueUpdated = ({ value }) => {\r\n    this._updateDisplay(!!value);\r\n  };\r\n\r\n  _updateDisplay = isActive => {\r\n    if (isActive === undefined) {\r\n      isActive = isPropTruthy(this.props.active);\r\n    }\r\n    const display = isActive ? 'flex' : 'none';\r\n    this.setNativeProps({ style: { display } });\r\n  };\r\n\r\n  setNativeProps = nativeProps => {\r\n    if (this._view) {\r\n      this._view.setNativeProps(nativeProps);\r\n    }\r\n  };\r\n\r\n  _setRef = view => {\r\n    this._view = view;\r\n    this._updateDisplay();\r\n  };\r\n\r\n  render() {\r\n    return <Animated.View {...this.props} ref={this._setRef} />;\r\n  }\r\n}\r\n\r\nexport const ScreenContainer = View;\r\n\r\nexport const NativeScreen = View;\r\n\r\nexport const NativeScreenContainer = View;\r\n"]},"metadata":{},"sourceType":"script"}