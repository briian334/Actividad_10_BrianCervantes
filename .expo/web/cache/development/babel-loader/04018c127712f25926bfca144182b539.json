{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createDOMProps = _interopRequireDefault(require(\"../createDOMProps\"));\n\nvar _findNodeHandle = _interopRequireDefault(require(\"../../exports/findNodeHandle\"));\n\nvar _styleResolver = _interopRequireDefault(require(\"../../exports/StyleSheet/styleResolver\"));\n\nvar _UIManager = _interopRequireDefault(require(\"../../exports/UIManager\"));\n\nvar NativeMethodsMixin = {\n  blur: function blur() {\n    _UIManager.default.blur((0, _findNodeHandle.default)(this));\n  },\n  focus: function focus() {\n    _UIManager.default.focus((0, _findNodeHandle.default)(this));\n  },\n  measure: function measure(callback) {\n    _UIManager.default.measure((0, _findNodeHandle.default)(this), callback);\n  },\n  measureInWindow: function measureInWindow(callback) {\n    _UIManager.default.measureInWindow((0, _findNodeHandle.default)(this), callback);\n  },\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    _UIManager.default.measureLayout((0, _findNodeHandle.default)(this), relativeToNativeNode, onFail, onSuccess);\n  },\n  setNativeProps: function setNativeProps(nativeProps) {\n    if (!nativeProps) {\n      return;\n    }\n\n    var node = (0, _findNodeHandle.default)(this);\n\n    if (node) {\n      var domProps = (0, _createDOMProps.default)(null, nativeProps, function (style) {\n        return _styleResolver.default.resolveWithNode(style, node);\n      });\n\n      _UIManager.default.updateView(node, domProps, this);\n    }\n  }\n};\nvar _default = NativeMethodsMixin;\nexports.default = _default;","map":{"version":3,"sources":["E:/UTCH/Cuatrimestre 4/Dise√±o de Apps/reactNative/actividad-10/node_modules/react-native-web/dist/modules/NativeMethodsMixin/index.js"],"names":["NativeMethodsMixin","blur","UIManager","focus","measure","callback","measureInWindow","measureLayout","relativeToNativeNode","onSuccess","onFail","setNativeProps","nativeProps","node","domProps","style","styleResolver","resolveWithNode","updateView"],"mappings":";;;;;;;AASA;;AACA;;AACA;;AACA;;AACA,IAAIA,kBAAkB,GAAG;AAIvBC,EAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpBC,uBAAUD,IAAV,CAAe,6BAAe,IAAf,CAAf;AACD,GANsB;AAYvBE,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBD,uBAAUC,KAAV,CAAgB,6BAAe,IAAf,CAAhB;AACD,GAdsB;AAmBvBC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClCH,uBAAUE,OAAV,CAAkB,6BAAe,IAAf,CAAlB,EAAwCC,QAAxC;AACD,GArBsB;AAsCvBC,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBD,QAAzB,EAAmC;AAClDH,uBAAUI,eAAV,CAA0B,6BAAe,IAAf,CAA1B,EAAgDD,QAAhD;AACD,GAxCsB;AA6CvBE,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,oBAAvB,EAA6CC,SAA7C,EAAwDC,MAAxD,EAAgE;AAC7ER,uBAAUK,aAAV,CAAwB,6BAAe,IAAf,CAAxB,EAA8CC,oBAA9C,EAAoEE,MAApE,EAA4ED,SAA5E;AACD,GA/CsB;AAuDvBE,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,WAAxB,EAAqC;AACnD,QAAI,CAACA,WAAL,EAAkB;AAChB;AACD;;AAED,QAAIC,IAAI,GAAG,6BAAe,IAAf,CAAX;;AAEA,QAAIA,IAAJ,EAAU;AAGR,UAAIC,QAAQ,GAAG,6BAAe,IAAf,EAAqBF,WAArB,EAAkC,UAAUG,KAAV,EAAiB;AAChE,eAAOC,uBAAcC,eAAd,CAA8BF,KAA9B,EAAqCF,IAArC,CAAP;AACD,OAFc,CAAf;;AAGAX,yBAAUgB,UAAV,CAAqBL,IAArB,EAA2BC,QAA3B,EAAqC,IAArC;AACD;AACF;AAtEsB,CAAzB;eAwEed,kB","sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\nimport createDOMProps from '../createDOMProps';\r\nimport findNodeHandle from '../../exports/findNodeHandle';\r\nimport styleResolver from '../../exports/StyleSheet/styleResolver';\r\nimport UIManager from '../../exports/UIManager';\r\nvar NativeMethodsMixin = {\r\n  /**\r\n   * Removes focus from an input or view. This is the opposite of `focus()`.\r\n   */\r\n  blur: function blur() {\r\n    UIManager.blur(findNodeHandle(this));\r\n  },\r\n\r\n  /**\r\n   * Requests focus for the given input or view.\r\n   * The exact behavior triggered will depend the type of view.\r\n   */\r\n  focus: function focus() {\r\n    UIManager.focus(findNodeHandle(this));\r\n  },\r\n\r\n  /**\r\n   * Determines the position and dimensions of the view\r\n   */\r\n  measure: function measure(callback) {\r\n    UIManager.measure(findNodeHandle(this), callback);\r\n  },\r\n\r\n  /**\r\n   * Determines the location of the given view in the window and returns the\r\n   * values via an async callback. If the React root view is embedded in\r\n   * another native view, this will give you the absolute coordinates. If\r\n   * successful, the callback will be called be called with the following\r\n   * arguments:\r\n   *\r\n   *  - x\r\n   *  - y\r\n   *  - width\r\n   *  - height\r\n   *\r\n   * Note that these measurements are not available until after the rendering\r\n   * has been completed.\r\n   */\r\n  measureInWindow: function measureInWindow(callback) {\r\n    UIManager.measureInWindow(findNodeHandle(this), callback);\r\n  },\r\n\r\n  /**\r\n   * Measures the view relative to another view (usually an ancestor)\r\n   */\r\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\r\n    UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, onFail, onSuccess);\r\n  },\r\n\r\n  /**\r\n   * This function sends props straight to the underlying DOM node.\r\n   * This works as if all styles were set as inline styles. Since a DOM node\r\n   * may aleady be styled with class names and inline styles, we need to get\r\n   * the initial styles from the DOM node and merge them with incoming props.\r\n   */\r\n  setNativeProps: function setNativeProps(nativeProps) {\r\n    if (!nativeProps) {\r\n      return;\r\n    }\r\n\r\n    var node = findNodeHandle(this);\r\n\r\n    if (node) {\r\n      // Next state is determined by comparison to existing state (in the DOM).\r\n      // Existing state has already gone through i18n transform\r\n      var domProps = createDOMProps(null, nativeProps, function (style) {\r\n        return styleResolver.resolveWithNode(style, node);\r\n      });\r\n      UIManager.updateView(node, domProps, this);\r\n    }\r\n  }\r\n};\r\nexport default NativeMethodsMixin;"]},"metadata":{},"sourceType":"script"}